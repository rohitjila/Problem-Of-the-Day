# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def Sum(self,root):
        global cnt
        if root is None:
            return 0
        cnt+=1
        left=self.Sum(root.left)
        right=self.Sum(root.right)        
        return root.val+left+right
    
    def solve(self,root):
        global ans
        if root is None:
            return
        
        global cnt
        cnt = 0
        avg = ((self.Sum(root))/cnt)
        if (root.val == avg):
            ans+=1
        self.solve(root.left)
        self.solve(root.right)
    
    def averageOfSubtree(self, root: Optional[TreeNode]) -> int:
        global ans
        ans = 0 
        self.solve(root)
        return ans
    
#         def solve(root):
#             nonlocal ans
#             if not root:
#                 return 0,0
#             leftSide,leftNode = solve(root.left)
#             rightSide , rightNode = solve(root.right)
#             s = root.val + leftSide + rightSide
#             n = 1 + leftNode + rightNode
            
#             if (s // n == root.val):
#                 ans+=1
#             return s,n
        
#         ans=0
#         solve(root)
#         return ans
        
        
        
