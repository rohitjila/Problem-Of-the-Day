class Solution:
    
    # def solve(self,ind,wt,val,W,dp):
    #     if (ind == 0):
    #         if (wt[0] <= W):
    #             return val[0]
    #         else:
    #             return 0
                
    #     if (dp[ind][W] != -1):
    #         return dp[ind][W]
        
    #     nottake  = 0 + self.solve(ind-1,wt,val,W,dp)
    #     take = -99999999
    #     if (wt[ind] <= W):
    #         take = val[ind] + self.solve(ind-1,wt,val,W-wt[ind],dp)
    #     dp[ind][W] = max(nottake,take)
    #     return dp[ind][W]
        
    def knapSack(self,W, wt, val, n):
        dp=[[-1 for i in range(W+1)] for i in range(n)]
        dp[0][0] = 0
        for i in range(1,W+1):
            if (wt[0] <= i):
                dp[0][i] = val[0]
            else:
                dp[0][i] = 0
        for i in range(n):
            dp[i][0] = 0
            
        for i in range(1,n):
            for j in range(1,W+1):
                nottake  = 0 + dp[i-1][j]
                take = -99999999
                if (wt[i] <= j):
                    take = val[i] + dp[i-1][j-wt[i]]
                dp[i][j] = max(nottake,take)
        return dp[-1][-1]
                
        
        # return self.solve(n-1,wt,val,W,dp)
        

#{ 
#  Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

# Contributed by : Nagendra Jha

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        n = int(input())
        W = int(input())
        val = list(map(int,input().strip().split()))
        wt = list(map(int,input().strip().split()))
        ob=Solution()
        print(ob.knapSack(W,wt,val,n))
# } Driver Code Ends
