class Solution:
    #Tabulation
    def build_bridges(self, str1, str2):
        n=len(str1)
        m=len(str2)
        dp=[[0 for i in range(m+1)] for i in range(n+1)]
        return self.solve(n,m,str1,str2,dp)
        
    def solve(self,n,m,str1,str2,dp):
        for i in range(1,n+1):
            for j in range(1,m+1):
                if (str1[i-1] == str2[j-1]):
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        return dp[n][m]
        
        
        
        # Recursion And Memoization
        
        if (n == 0 or m == 0):
            return 0
            
        if (dp[n][m] != 0): return dp[n][m]
            
        if (str1[n-1] == str2[m-1]):
            dp[n][m] =  1 + self.solve(n-1,m-1,str1,str2,dp)
            return dp[n][m]
            
        else:
            dp[n][m] =max(self.solve(n-1,m,str1,str2,dp),self.solve(n,m-1,str1,str2,dp))
            return dp[n][m]
            
        
