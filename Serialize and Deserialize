# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        if root is None:
            return "#"
        s = ""
        queue = []
        queue.append(root)
        while(queue):
            currnode = queue.pop(0)
            if(currnode == None): s += ("#,")
            else:
                s += (str(currnode.val) + ",")
            if(currnode != None):
                queue.append(currnode.left)
                queue.append(currnode.right)
        # print(s) 
        return s[:-1]
        

    def deserialize(self, data):
        if data == "#":
            return None
        data = data.split(",")
        # print(data)
        
        pos = 1
        root = TreeNode(int(data[0]))
        queue = []
        queue.append(root)
        
        while(queue):
            node = queue.pop(0)
            if (data[pos] != "#"):
                node.left = TreeNode(int(data[pos]))
                queue.append(node.left)
                
            pos+=1
            
            if (data[pos] != "#"):
                node.right = TreeNode(int(data[pos]))
                queue.append(node.right)
                
            pos+=1
            
        return root
            
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
