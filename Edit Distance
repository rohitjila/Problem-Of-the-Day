class Solution:
    def minDistance(self, s1: str, s2: str) -> int:
        # i = len(s1) - 1
        # j = len(s2) - 1
        m = len(s1)
        n = len(s2)
        dp = [[0 for i in range(n+1)] for j in range(m+1)]
        for i in range(1,m+1):
            dp[i][0] = i
        for i in range(1,n+1):
            dp[0][i] = i
            
        for i in range(1,m+1):
            for j in range(1,n+1):
                if (s1[i-1] == s2[j-1]):
                    dp[i][j] = 0 + dp[i-1][j-1]
                else:
                    dp[i][j] = 1 + min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]))
        return dp[m][n]
        
        # dp = [[-1 for i in range(j+1)] for i in range(i+1)]
        # return self.f(s1,s2,i,j,dp)
    
#     def f(self,s1,s2,i,j,dp):
#         if (i < 0):
#             return j + 1
#         if (j < 0):
#             return i + 1
#         if (dp[i][j] != -1):
#             return dp[i][j]
        
#         if (s1[i] == s2[j]):
#             dp[i][j] =  0 + self.f(s1,s2,i-1,j-1,dp)
#             return dp[i][j]
        
#         else:
#             dp[i][j] =  min(1+self.f(s1,s2,i-1,j,dp),min(1+self.f(s1,s2,i,j-1,dp),1+self.f(s1,s2,i-1,j-1,dp)))
#             return dp[i][j]
        
