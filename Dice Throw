class Solution:
    def noOfWays(self, faces, dice, target):
        dp=[[0 for i in range(target+1)] for i in range(dice+1)]
        dp[0][0] = 1
        for i in range(1,dice+1):
            for j in range(1,target+1):
                result = 0
                for k in range(1,faces+1):
                    if (j >= k):
                        result += dp[i-1][j - k]
                dp[i][j] = result
        return dp[-1][-1]
        
        
        
        
        
        # return self.f(faces,dice,target,dp)
    # def f(self,faces,dice,target,dp):
    #     #Recursion 
    #     if (target == 0 and dice == 0):
    #         return 1
    #     if (target < 0):
    #         return 0
    #     if (dp[dice][target] != -1):
    #         return dp[dice][target]
    #     result = 0
    #     for i in range(1,faces+1):
    #         if (target  > 0 and dice > 0):
    #             result+=self.f(faces,dice-1,target-i,dp)
    #     dp[dice][target] = result
    #     return dp[dice][target]
        
