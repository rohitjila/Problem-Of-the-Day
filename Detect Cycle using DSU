class Solution:
    def find(self,n1,par,rank):
        res = n1
        while(res != par[res]):
            par[res]=par[par[res]]
            res = par[res]
        return res
        
    def union(self,x,y,par,rank):
        p1 = self.find(x,par,rank)
        p2 = self.find(y,par,rank) 
        if (p1 == p2):
            return 
        if (rank[p1] > rank[p2]):
            par[p2]=p1
            rank[p1]+=rank[p2]
        else:
            par[p1]=p2
            rank[p2]+=rank[p1]
                
    
	def detectCycle(self, V, adj):
        par=[i for i in range(V)]
        rank=[1 for i in range(V)]
        for i in range(V):
            for j in adj[i]:
                p1 = self.find(i,par,rank)
                p2 = self.find(j,par,rank)
                if (p1 == p2):
                    if (i == p1 or j == p2):
                        continue
                    else:
                        return 1
                self.union(i,j,par,rank)
        return 0
