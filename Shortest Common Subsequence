class Solution:
    
    Function to find length of shortest common supersequence of two strings.
    def f(self,X,Y,m,n,dp):
        if (m < 0 or n < 0):
            return 0
            
        if (dp[n][m] != -1):
            return dp[n][m]
            
        if (X[m] == Y[n]):
            dp[n][m] =  1 + self.f(X,Y,m-1,n-1,dp)
            return dp[n][m]
        else:
            dp[n][m] = max(self.f(X,Y,m-1,n,dp),self.f(X,Y,m,n-1,dp))
            return dp[n][m]
        
    def shortestCommonSupersequence(self, X, Y, m, n):
        dp = [[0 for i in range(n+1)] for i in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                if (X[i-1] == Y[j-1]):
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])
        ans = dp[m][n]
        final_ans1  = m - ans 
        final_ans2 = n - ans
        res = final_ans1 + final_ans2 + ans
        return res
        
        dp = [[-1 for i in range(m)] for j in range(n)]
        ans =  self.f(X,Y,m-1,n-1,dp)
        k = m - ans
        l = n - ans
        final_ans = ans + k + l
        return final_ans
